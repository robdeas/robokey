package tech.robd.robokey.events

import org.springframework.context.ApplicationEventPublisher
import java.util.UUID

/**
 * Represents a batch of related `CommandEventContext` objects within the RoboKey event system.
 *
 * `EventBatch` is a specialized `EventGroup` designed to group multiple `CommandEventContext` instances
 * under a single batch, enabling hierarchical tracking and management of commands or events.
 * Each batch is uniquely identified by a UUID, and it supports operations such as adding, removing,
 * and clearing contexts. It also integrates with the event-driven architecture by publishing
 * batch-level events.
 *
 * Key Features:
 * - Groups multiple `CommandEventContext` objects, providing a unified structure for batch processing.
 * - Automatically publishes a `START_BATCH_EVENT` upon creation for traceability.
 * - Supports dynamic modifications, such as adding or removing contexts.
 * - Enables publishing batch-level events to notify listeners of batch operations.
 *
 * @property eventPublisher The `ApplicationEventPublisher` used to publish events related to this batch.
 * @property eventSourceActor The actor or originator, which is responsible for the batch (e.g. GUI, SYSTEM).
 * @property batchContents Optional metadata or description of the batch contents.
 * @property uuid A unique identifier for this batch, generated by default.
 * @property mutableContexts A mutable list of `CommandEventContext` objects included in the batch.
 * @property contexts An immutable view of the contexts in this batch.
 * @property eventCommand The primary command associated with the batch; defaults to `UNDEFINED`.
 */
class EventBatch(
    val eventPublisher: ApplicationEventPublisher,
    override val eventSourceActor: EventSourceActor? = null,
    val batchContents: String? = null,
    override val uuid: String = UUID.randomUUID().toString(),
    private val mutableContexts: MutableList<CommandEventContext> = mutableListOf(),
    override val eventCommand: EventCommand = EventCommand.UNDEFINED,
) : EventGroup() {
    /**
     * Indicates whether this group represents a batch.
     *
     * @return Always `true.
     */
    override fun isBatch(): Boolean = true

    /**
     * Exposes an immutable view of the contexts included in this batch.
     *
     * @return A read-only list of `CommandEventContext` objects in the batch.
     */
    val contexts: List<CommandEventContext> get() = mutableContexts

    init {
        // Automatically publish a START_BATCH_EVENT upon instantiation
        publishBatchEvent(EventType.START_BATCH_EVENT, "BATCH of Commands initialized")
    }

    /**
     * Adds a `CommandEventContext` to this batch.
     *
     * This method ensures that duplicate contexts are not added. If the context already exists
     * in the batch, an `IllegalArgumentException` is thrown.
     *
     * @param context The `CommandEventContext` to add.
     * @throws IllegalArgumentException If the context is already part of the batch.
     */
    fun addContext(context: CommandEventContext) {
        require(context !in mutableContexts) {
            "Context with UUID ${context.uuid} is already part of this batch."
        }
        mutableContexts.add(context)
    }

    /**
     * Removes a `CommandEventContext` from this batch.
     *
     * @param context The `CommandEventContext` to remove.
     * @return `true` if the context was successfully removed, `false` otherwise.
     */
    fun removeContext(context: CommandEventContext): Boolean = mutableContexts.remove(context)

    /**
     * Clears all `CommandEventContext` objects from this batch.
     */
    fun clearContexts() {
        mutableContexts.clear()
    }

    /**
     * Publishes an event for the entire batch.
     *
     * This method generates a `RoboKeyEvent` associated with the entire batch. Listeners can
     * respond to this event to track or process batch-level operations.
     *
     * @param eventType The type of event to publish (e.g., `START_BATCH_EVENT`, `BATCH_COMPLETED`).
     * @param data Additional data or metadata associated with the event.
     */
    fun publishBatchEvent(
        eventType: EventType,
        data: String?,
    ) {
        val event =
            RoboKeyEvent(
                eventSourceActor = eventSourceActor ?: EventSourceActor.UNKNOWN,
                parentEvent = this, // Batch-level events won't have a specific CommandEventContext.
                eventType = eventType,
                eventData = data ?: "Event from EventBatch with UUID: $uuid",
                eventPublisher = eventPublisher,
            )
    }
}
